name: Platform Engineering CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-north-1
  EKS_CLUSTER_NAME: idp-cluster
  ECR_REPOSITORY: platform-engineering
  
jobs:
  # Infrastructure validation and planning
  terraform-validate:
    name: 'Terraform Validate'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Terraform Format Check
      working-directory: ./infra
      run: terraform fmt -check
    
    - name: Terraform Init
      working-directory: ./infra
      run: terraform init
    
    - name: Terraform Validate
      working-directory: ./infra
      run: terraform validate
    
    - name: Terraform Plan
      working-directory: ./infra
      run: terraform plan -no-color
      continue-on-error: true

  # Application build and test
  build-app:
    name: 'Build Application'
    runs-on: ubuntu-latest
    needs: terraform-validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm install
        cd backstage && yarn install --frozen-lockfile
    
    - name: Build Backstage
      working-directory: ./backstage
      run: |
        yarn build:backend
        yarn build
    
    - name: Run tests
      working-directory: ./backstage
      run: yarn test --passWithNoTests
      continue-on-error: true

  # Build and push Docker images
  build-and-push:
    name: 'Build and Push Docker Image'
    runs-on: ubuntu-latest
    needs: build-app
    if: github.ref == 'refs/heads/main'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy infrastructure (only on main branch)
  deploy-infrastructure:
    name: 'Deploy Infrastructure'
    runs-on: ubuntu-latest
    needs: [terraform-validate, build-and-push]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Terraform Init
      working-directory: ./infra
      run: terraform init
    
    - name: Terraform Apply
      working-directory: ./infra
      run: terraform apply -auto-approve

  # Deploy application to EKS
  deploy-to-eks:
    name: 'Deploy to EKS'
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, build-and-push]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
    
    - name: Deploy to Kubernetes
      run: |
        # Replace image tag in deployment manifest
        sed -i 's|IMAGE_TAG|${{ needs.build-and-push.outputs.image-tag }}|g' deployment.yml
        
        # Apply Kubernetes manifests
        kubectl apply -f deployment.yml
        kubectl rollout status deployment/backstage-deployment
        
        # Get service URL
        kubectl get services

  # Security scanning
  security-scan:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    needs: build-and-push
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-push.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Cleanup on failure
  cleanup:
    name: 'Cleanup on Failure'
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-to-eks]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Cleanup failed deployment
      run: |
        echo "Cleanup procedures would go here"
        # Add specific cleanup commands if needed