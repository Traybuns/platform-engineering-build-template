name: Platform Engineering CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-north-1
  EKS_CLUSTER_NAME: idp-cluster
  ECR_REPOSITORY: platform-engineering
  
jobs:
  terraform-validate:
    name: 'Terraform Validate'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Terraform Format Check
      working-directory: ./infra
      run: terraform fmt -check
      continue-on-error: true
    
    - name: Terraform Init
      working-directory: ./infra
      run: terraform init
    
    - name: Terraform Validate
      working-directory: ./infra
      run: terraform validate
    
    - name: Terraform Plan
      working-directory: ./infra
      run: terraform plan -no-color
      continue-on-error: true

  build-app:
    name: 'Build Application'
    runs-on: ubuntu-latest
    needs: terraform-validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      working-directory: ./backstage
      run: yarn install --frozen-lockfile
    
    - name: Build Backstage Backend
      working-directory: ./backstage
      run: yarn build:backend
    
    - name: Build All Components
      working-directory: ./backstage
      run: yarn build:all
    
    - name: Run tests
      working-directory: ./backstage
      run: yarn test --passWithNoTests --watchAll=false
      continue-on-error: true

  build-and-push:
    name: 'Build and Push Docker Image'
    runs-on: ubuntu-latest
    needs: build-app
    if: github.ref == 'refs/heads/main'
    
    outputs:
      image-tag: ${{ steps.build.outputs.image-tag }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build Backstage Image
      working-directory: ./backstage
      run: |
        yarn build:backend
        yarn build-image --tag temp-backstage-image
        echo "Listing Docker images:"
        docker images | grep temp-backstage-image
    
    - name: Tag and push to ECR
      id: build
      run: |
        # Get the temporary image ID
        IMAGE_ID=$(docker images temp-backstage-image --format "table {{.ID}}" | tail -1)
        if [ -z "$IMAGE_ID" ]; then
          echo "Error: No image found with name 'temp-backstage-image'"
          exit 1
        fi
        echo "Image ID: $IMAGE_ID"
        
        # Tag for ECR
        docker tag $IMAGE_ID ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        docker tag $IMAGE_ID ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
        
        # Push to ECR
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
        
        # Set outputs for other jobs
        echo "image-tag=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "digest=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} | cut -d'@' -f2)" >> $GITHUB_OUTPUT

  deploy-infrastructure:
    name: 'Deploy Infrastructure'
    runs-on: ubuntu-latest
    needs: [terraform-validate, build-and-push]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3